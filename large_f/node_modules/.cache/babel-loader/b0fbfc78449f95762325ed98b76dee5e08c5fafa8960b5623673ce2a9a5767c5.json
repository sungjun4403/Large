{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"div\", null, null, -1 /* HOISTED */);\nconst _hoisted_2 = {\n  id: \"TemplateBody\"\n};\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"textarea\", {\n  id: \"textarea\",\n  cols: \"30\",\n  rows: \"10\"\n}, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _createElementVNode(\"div\", _hoisted_2, [_hoisted_3, _createTextVNode(\" Template \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.templates, template => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: template.id\n    }, [_createTextVNode(_toDisplayString(template.templateNumber) + \" \" + _toDisplayString(template.templateName) + \" \" + _toDisplayString(template.template) + \" \" + _toDisplayString(template.hotKey) + \" \", 1 /* TEXT */), _hoisted_4]);\n  }), 128 /* KEYED_FRAGMENT */)), _hoisted_5, _hoisted_6])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";gCACAA,oBAEM;;EACGC,EAAE,EAAC;AAAc;gCAClBD,oBAAI;gCAQAA,oBAAI;gCAGRA,oBAAI;gCACJA,oBAAuD;EAA7CC,EAAE,EAAC,UAAU;EAACC,IAAI,EAAC,IAAI;EAACC,IAAI,EAAC;;;;6DAhB/CC,UAEM,EACFJ,oBAcM,OAdNK,UAcM,GAbFC,UAAI,+BAGJ,0CAMKC,6BANkBC,gBAAS,EAArBC,QAAQ;yBAAnBC,oBAMK;MAN8BC,GAAG,EAAEF,QAAQ,CAACR;0CAC3CQ,QAAQ,CAACG,cAAc,IAAE,GAC3B,oBAAEH,QAAQ,CAACI,YAAY,IAAE,GACzB,oBAAEJ,QAAQ,CAACA,QAAQ,IAAE,GACrB,oBAAEA,QAAQ,CAACK,MAAM,IAAE,GACnB,2BAAI;kCAGRC,UAAI,EACJC,UAAuD","names":["_createElementVNode","id","cols","rows","_hoisted_1","_hoisted_2","_hoisted_3","_Fragment","$setup","template","_createElementBlock","key","templateNumber","templateName","hotKey","_hoisted_5","_hoisted_6"],"sourceRoot":"","sources":["/Users/sungjun/Documents/Large/large_f/src/components/NavBar/Preferences/Template/Template.vue"],"sourcesContent":["<template>\n<div>\n    \n</div>\n    <div id=\"TemplateBody\">\n        <br>\n        Template\n\n        <li v-for=\"template in templates\" :key=\"template.id\">\n            {{template.templateNumber}}\n            {{template.templateName}}\n            {{template.template}}\n            {{template.hotKey}}\n            <br>\n        </li>\n\n        <br>\n        <textarea id=\"textarea\" cols=\"30\" rows=\"10\"></textarea>\n    </div>\n</template>\n\n<script>\nimport { ref } from \"@vue/reactivity\"\nconst axios = require('axios').default;\n\nexport default ({\n    setup() {\n        const templates = ref([])\n\n        return { templates }\n    },\n    mounted() {\n        var inSlash = false\n        this.getAllTemplates()\n        var textarea = document.getElementById(\"textarea\")\n        // var textarea = document.textarea\n        textarea.addEventListener('keydown', (e) => {\n            if (e.key == \"/\") {\n                inSlash = true\n            }\n            if (inSlash == true) {\n                setTimeout(function () {\n                    console.log(textarea.value.indexOf(\"/http\"))\n                }, 100)\n            }\n            if (e.key == \" \") {\n                inSlash = false\n            }\n        })\n    },\n    methods: {\n        getAllTemplates() {\n            axios({\n                url: 'http://localhost:8080/template/' + localStorage.getItem(\"gitID\"),\n                method: 'get',\n                headers: {\n                    'Authorization' : 'Bearer ' + localStorage.getItem(\"AccessToken\")\n                }\n            }).then((response) => {\n                response.data.forEach(element => {\n                    this.templates.push(element)\n                });\n            })\n        }\n            \n    }\n})\n</script>\n\n<style>\n    #TemplateBody {\n        text-align: center;\n    }\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}