{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"textarea\", {\n    id: \"textarea\",\n    cols: \"70\",\n    rows: \"70\",\n    onInput: _cache[0] || (_cache[0] = $event => $options.render())\n  }, null, 32 /* HYDRATE_EVENTS */), _createCommentVNode(\" <a id=\\\"google\\\" href=\\\"https://google.com\\\">GOOGLE</a>\\n    <style> \\n        #google {\\n            text-decoration: none;\\n        } \\n    </style>  \")], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */);\n}","map":{"version":3,"mappings":";;6DACIA,oBAA6E;IAAnEC,EAAE,EAAC,UAAU;IAACC,IAAI,EAAC,IAAI;IAACC,IAAI,EAAC,IAAI;IAAMC,OAAK,sCAAEC,eAAM;qCAE9DC,gLAKa","names":["_createElementVNode","id","cols","rows","onInput","$options","_createCommentVNode"],"sourceRoot":"","sources":["/Users/sungjun/Documents/Large/large_f/src/toRender.vue"],"sourcesContent":["<template>\n    <textarea id=\"textarea\" cols=\"70\" rows=\"70\" v-on:input=\"render()\"></textarea>\n    \n    <!-- <a id=\"google\" href=\"https://google.com\">GOOGLE</a>\n    <style> \n        #google {\n            text-decoration: none;\n        } \n    </style>  -->\n</template>\n\n\n              \n\n<script>\nexport default {\n    methods: {\n        render() {\n            var toRender =\n                '<a id=\"google\" href=\"https://google.com\">GOOGLE</a> '+\n                '<style> ' + \n                '   #google { ' + \n                '        text-decoration: none; ' +\n                '    } ' +\n                '</style> '\n            \n            // var toRender = document.getElementById(\"textarea\").value\n            // var RenderedBody = document.getElementById(\"Rendered\")\n            // var RenderedStyle\n            // var RenderedScript\n\n            var toRenderStyle = this.getStyle(toRender)\n            console.log(toRender)\n            console.log(toRenderStyle)\n            // var toRenderScript = getScript(toRender)    \n\n\n\n        },\n\n        getStyle(toRender) {\n            var StyleStart = toRender.indexOf('<style>')\n            var StyleEnd = toRender.indexOf('</style>')\n            var StyleStr = toRender.substr(StyleStart, StyleEnd)\n            return StyleStr\n        },\n\n        getScript(toRender) {\n            var StyleStart = toRender.indexOf('<style>')\n            var StyleEnd = toRender.indexOf('</style>')\n            var StyleStr = toRender.substr(StyleStart, StyleEnd)\n            return StyleStr\n        },\n    }\n}\n</script>\n\n\n<style>\n    #toRender {\n        float: left;\n        font-family: 'Courier New', Courier, monospace;\n    }\n\n    #textarea {\n        \n    }\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}