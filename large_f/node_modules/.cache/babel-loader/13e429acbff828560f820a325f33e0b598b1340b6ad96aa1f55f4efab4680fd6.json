{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  id: \"UserHomeBody\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createTextVNode(_toDisplayString($setup.gitID) + \"'s dev-log ! \", 1 /* TEXT */), _hoisted_2, _createTextVNode(\" WELCOME! \"), _hoisted_3, _hoisted_4, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.posts, post => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: post.id\n    }, [_createVNode(_component_router_link, {\n      to: {\n        name: 'Post',\n        params: {\n          gitID: post.gitID,\n          postId: post.id\n        }\n      }\n    }, {\n      default: _withCtx(() => [_createElementVNode(\"div\", null, _toDisplayString(post.title) + \" \" + _toDisplayString(post.body) + \" \" + _toDisplayString(post.gitID) + \" \" + _toDisplayString(post.LastModifiedFromNow), 1 /* TEXT */)]),\n\n      _: 2 /* DYNAMIC */\n    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"to\"]), _hoisted_5]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"mappings":";;EACSA,EAAE,EAAC;AAAc;gCAGlBC,oBAAI;gCAEJA,oBAAI;gCAAAA,oBAAI;gCAUJA,oBAAI;;;;uBAfZC,oBAkBM,OAlBNC,UAkBM,qCAhBAC,YAAK,IAAE,eACT,2BAAI,+BAEJ,aAAI,YAAI,qBACRF,oBAUMG,6BAVgBD,YAAK,EAAdE,IAAI;yBAAjBJ,oBAUM;MAVwBK,GAAG,EAAED,IAAI,CAACN;QACpCQ,aAOcC;MAPAC,EAAE;QAAAC;QAAAC;UAAAC,OAAmCP,IAAI,CAACO,KAAK;UAAAC,QAAUR,IAAI,CAACN;QAAE;MAAA;;wBAC1E,MAKM,CALNC,oBAKM,8BAJAK,IAAI,CAACS,KAAK,IAAE,GACd,oBAAET,IAAI,CAACU,IAAI,IAAE,GACb,oBAAEV,IAAI,CAACO,KAAK,IAAE,GACd,oBAAEP,IAAI,CAACW,mBAAmB;;;iDAGlCC,UAAI","names":["id","_createElementVNode","_createElementBlock","_hoisted_1","$setup","_Fragment","post","key","_createVNode","_component_router_link","to","name","params","gitID","postId","title","body","LastModifiedFromNow","_hoisted_5"],"sourceRoot":"","sources":["/Users/sungjun/Documents/Large/large_f/src/components/User/UserHome.vue"],"sourcesContent":["<template>\n    <div id=\"UserHomeBody\">\n        \n        {{gitID}}'s dev-log ! \n        <br>\n        WELCOME!\n        <br><br>\n        <div v-for=\"(post) in posts\" :key=\"post.id\">\n            <router-link :to=\"{ name: 'Post', params: { gitID: post.gitID, postId: post.id }}\">\n                <div>\n                    {{post.title}}\n                    {{post.body}}\n                    {{post.gitID}}\n                    {{post.LastModifiedFromNow}}\n                </div>\n            </router-link>\n            <br>\n        </div>\n \n    </div>\n</template>\n\n<script>\nimport { ref } from '@vue/reactivity'\nconst axios = require(\"axios\").default\nconst moment = require('moment')\n\nexport default {\n    setup() {\n        // const gitID = this.$route.params.get(\"gitID\")\n        const gitID = ref(\"\")\n        const posts = ref([])\n        // const gitID = \"suingujn4403\"\n        return {\n            gitID,\n            posts,\n        }\n    },\n    beforeMount() {\n        this.gitID = this.$route.params.gitID\n        this.$forceUpdate()\n\n        axios({\n            url: 'http://localhost:8080/post/brief/' + this.gitID,\n            method: 'get',\n            \n        }).then((response) => {\n            response.data.forEach(element => {\n                const LastModifiedDate = new Date(element.lastModifiedDate)\n                const LastModifiedMoment = moment(LastModifiedDate)\n                const LastModifiedFromNow = LastModifiedMoment.fromNow()\n                element.LastModifiedFromNow = LastModifiedFromNow\n                this.posts.push(element)    \n\n            })\n        })\n    },\n    mounted() {\n        setInterval(()=> {\n            this.posts.forEach(post => {\n                post.LastModifiedFromNow = moment()\n            })\n        })\n    },\n    methods: {\n\n    },\n}\n</script>\n\n<style >\n    #UserHomeBody {\n        text-align: center;\n    }\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}