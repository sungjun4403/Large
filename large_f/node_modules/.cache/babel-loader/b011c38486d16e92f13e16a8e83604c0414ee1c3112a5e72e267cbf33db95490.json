{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  id: \"UserHomeBody\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1);\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1);\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1);\nconst _hoisted_7 = {\n  key: 0\n};\nconst _hoisted_8 = {\n  key: 1\n};\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"button\", null, \"Create Post\", -1);\nconst _hoisted_10 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$setup.UserExists == true ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createTextVNode(_toDisplayString($setup.gitID) + \"'s dev-log ! \", 1), _hoisted_3, _createTextVNode(\" WELCOME! \"), _hoisted_4, _hoisted_5, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.posts, post => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: post.id\n    }, [_createVNode(_component_router_link, {\n      to: {\n        name: 'Post',\n        params: {\n          gitID: post.gitID,\n          postId: post.id\n        }\n      }\n    }, {\n      default: _withCtx(() => [_createElementVNode(\"div\", null, _toDisplayString(post.title) + \" \" + _toDisplayString(post.body) + \" \" + _toDisplayString(post.gitID) + \" \" + _toDisplayString(post.LastModifiedFromNow), 1)]),\n      _: 2\n    }, 1032, [\"to\"]), _hoisted_6]);\n  }), 128)), $setup.posts.length == 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, \" no posts yet \")) : _createCommentVNode(\"\", true), $setup.IfBlogIsMine == true ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [_createVNode(_component_router_link, {\n    to: {\n      name: 'PostCreate',\n      params: {\n        gitID: $setup.gitID\n      }\n    }\n  }, {\n    default: _withCtx(() => [_hoisted_9]),\n    _: 1\n  }, 8, [\"to\"])])) : _createCommentVNode(\"\", true)])) : _createCommentVNode(\"\", true), $setup.UserExists == false ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, \" Page does not exists \")) : _createCommentVNode(\"\", true)]);\n}","map":{"version":3,"mappings":";;EACSA,EAAE,EAAC;AAAc;;;;gCAGdC,oBAAI;gCAEJA,oBAAI;gCAAAA,oBAAI;gCAYJA,oBAAI;;;;;;;gCAWAA,oBAA4B,gBAApB,aAAW;;;;;;uBA5BnCC,oBAmCM,OAnCNC,UAmCM,GAlCSC,iBAAU,0BAArBF,oBA8BM,sDA7BAE,YAAK,IAAE,eACT,gBAAI,+BAEJ,aAAI,YAAI,qBAGRF,oBAUMG,6BAVgBD,YAAK,EAAdE,IAAI;yBAAjBJ,oBAUM;MAVwBK,GAAG,EAAED,IAAI,CAACN;QACpCQ,aAOcC;MAPAC,EAAE;QAAAC;QAAAC;UAAAC,OAAmCP,IAAI,CAACO,KAAK;UAAAC,QAAUR,IAAI,CAACN;QAAE;MAAA;;wBAC1E,MAKM,CALNC,oBAKM,8BAJAK,IAAI,CAACS,KAAK,IAAE,GACd,oBAAET,IAAI,CAACU,IAAI,IAAE,GACb,oBAAEV,IAAI,CAACO,KAAK,IAAE,GACd,oBAAEP,IAAI,CAACW,mBAAmB;;sBAGlCC,UAAI;aAIGd,YAAK,CAACe,MAAM,uBAAvBjB,oBAEM,mBAFwB,gBAE9B,oCAGWE,mBAAY,0BAAvBF,oBAIM,oBAHFM,aAEcC;IAFAC,EAAE;MAAAC;MAAAC;QAAAC,OAAyCT;MAAK;IAAA;;sBAC1D,MAA4B,CAA5BgB,UAA4B;;uFAI7BhB,iBAAU,2BAArBF,oBAEM,oBAF0B,wBAEhC","names":["id","_createElementVNode","_createElementBlock","_hoisted_1","$setup","_Fragment","post","key","_createVNode","_component_router_link","to","name","params","gitID","postId","title","body","LastModifiedFromNow","_hoisted_6","length","_hoisted_9"],"sourceRoot":"","sources":["/Users/sungjun/Documents/Large/large_f/src/components/User/UserHome.vue"],"sourcesContent":["<template>\n    <div id=\"UserHomeBody\">\n        <div v-if=\"UserExists == true\">\n            {{gitID}}'s dev-log ! \n            <br>\n            WELCOME!\n            <br><br>\n\n            <!-- if post exists -->\n            <div v-for=\"(post) in posts\" :key=\"post.id\">\n                <router-link :to=\"{ name: 'Post', params: { gitID: post.gitID, postId: post.id }}\">\n                    <div>\n                        {{post.title}}\n                        {{post.body}}\n                        {{post.gitID}}\n                        {{post.LastModifiedFromNow}}\n                    </div>\n                </router-link>\n                <br>\n            </div>\n\n            <!-- if post dosen't exists -->\n            <div v-if=\"posts.length == 0\">\n                no posts yet\n            </div>\n\n            <!-- create post button. appears when blog is user's regardless to post exists or not   -->\n            <div v-if=\"IfBlogIsMine == true\">\n                <router-link :to=\"{ name: 'PostCreate', params: { gitID: gitID}}\">\n                    <button>Create Post</button>\n                </router-link>\n            </div>\n        </div>\n        <div v-if=\"UserExists == false\">\n            Page does not exists \n        </div>\n    </div>\n</template>\n\n<script>\nimport { ref } from '@vue/reactivity'\nconst axios = require(\"axios\").default\nconst moment = require('moment')\n\nexport default {\n    setup() {\n        const gitID = ref(\"\")\n        const posts = ref([])\n        const UserExists = ref(\"pending\")\n        const IfBlogIsMine = ref(\"pending\")\n        \n        return {\n            gitID,\n            posts,\n            UserExists,\n            IfBlogIsMine\n        }\n    },\n    beforeMount() {\n        this.gitID = this.$route.params.gitID\n\n        //If User Exists\n        axios({\n            url: 'https://large-devlog.com/post/brief/' + this.gitID,\n            method: 'get',\n            \n        }).then((response) => {\n            this.UserExists = true;\n            response.data.forEach(element => {\n                const LastModifiedFromNow = moment(element.lastModifiedDate).fromNow()\n                element.LastModifiedFromNow = LastModifiedFromNow\n                this.posts.push(element)    \n            })\n            \n        }).catch((ErrorResponse) => {\n            if (ErrorResponse.response.status == 500) {\n                this.UserExists = false;\n            }   \n        })\n\n        //If Blog is Mine\n        axios({\n            url: 'https://large-devlog.com/ifTokenIsAuthentic/' + this.gitID,\n            headers: {\n                'Authorization' : 'Bearer ' + localStorage.AccessToken\n            },\n        }).then((response) => {\n            if (response.data == true) {\n                this.IfBlogIsMine = true\n                console.log('NO')\n            }\n            else {\n                this.IfBlogIsMine = false\n            }\n        }) \n    },\n    mounted() {\n        setInterval(()=> {\n            this.posts.forEach(post => {\n                post.LastModifiedFromNow = moment(post.lastModifiedDate).fromNow()            \n            }, 30000)\n        })\n    },\n    methods: {\n\n    },\n}\n</script>\n\n<style >\n    #UserHomeBody {\n        text-align: center;\n    }\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}